<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.1 (Python 3.7.4 on linux)" generated="20201029 10:02:03.644" rpa="false">
<suite id="s1" name="Book Shop Db Tests" source="/home/hakan/Python/Robot/robot-fw-database-library-tests/Tests/book_shop_db_tests.robot">
<kw name="Connect To Database and Check Tables Existence" type="setup">
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>dbConfigFile=${BOOK_SHOB_DB_CONFIG_FILE}</arg>
</arguments>
<msg timestamp="20201029 10:02:03.768" level="INFO">Connecting using : pymysql.connect(db=book_shop_db, user=root, passwd=h1a2k3a4, host=localhost, port=3306, charset=None) </msg>
<status status="PASS" starttime="20201029 10:02:03.719" endtime="20201029 10:02:03.798"></status>
</kw>
<kw name="Table Must Exist" library="DatabaseLibrary">
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>${BOOKS_TABLE}</arg>
</arguments>
<msg timestamp="20201029 10:02:03.798" level="INFO">Executing : Table Must Exist  |  books </msg>
<msg timestamp="20201029 10:02:03.798" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='books' </msg>
<status status="PASS" starttime="20201029 10:02:03.798" endtime="20201029 10:02:03.821"></status>
</kw>
<kw name="Table Must Exist" library="DatabaseLibrary">
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>${CUSTOMERS_TABLE}</arg>
</arguments>
<msg timestamp="20201029 10:02:03.822" level="INFO">Executing : Table Must Exist  |  customers </msg>
<msg timestamp="20201029 10:02:03.822" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='customers' </msg>
<status status="PASS" starttime="20201029 10:02:03.822" endtime="20201029 10:02:03.826"></status>
</kw>
<kw name="Table Must Exist" library="DatabaseLibrary">
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>${ORDERS_TABLE}</arg>
</arguments>
<msg timestamp="20201029 10:02:03.827" level="INFO">Executing : Table Must Exist  |  orders </msg>
<msg timestamp="20201029 10:02:03.827" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='orders' </msg>
<status status="PASS" starttime="20201029 10:02:03.826" endtime="20201029 10:02:03.834"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:03.718" endtime="20201029 10:02:03.834"></status>
</kw>
<test id="s1-t1" name="Creating Target Book">
<kw name="Initialize Database Contents" type="setup">
<kw name="Execute Sql Script" library="DatabaseLibrary">
<doc>Executes the content of the `sqlScriptFileName` as SQL commands. Useful for setting the database to a known
state before running your tests, or clearing out your test data after running each a test. Set optional input
`sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>${INITIALIZE_DATABASE_CONTENTS}</arg>
</arguments>
<msg timestamp="20201029 10:02:03.835" level="INFO">Executing : Execute SQL Script  |  /home/hakan/Python/Robot/robot-fw-database-library-tests/Resources/book_shop_db_init.sql </msg>
<status status="PASS" starttime="20201029 10:02:03.835" endtime="20201029 10:02:03.876"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:03.835" endtime="20201029 10:02:03.876"></status>
</kw>
<kw name="When Create Target Book">
<kw name="Execute Sql Script" library="DatabaseLibrary">
<doc>Executes the content of the `sqlScriptFileName` as SQL commands. Useful for setting the database to a known
state before running your tests, or clearing out your test data after running each a test. Set optional input
`sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>${CREATE_TARGET_BOOK}</arg>
</arguments>
<msg timestamp="20201029 10:02:03.877" level="INFO">Executing : Execute SQL Script  |  /home/hakan/Python/Robot/robot-fw-database-library-tests/Resources/create_target_book.sql </msg>
<status status="PASS" starttime="20201029 10:02:03.877" endtime="20201029 10:02:03.882"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:03.876" endtime="20201029 10:02:03.882"></status>
</kw>
<kw name="Then Target Book Exists">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>${QUERY_TARGET_BOOK}</arg>
</arguments>
<assign>
<var>@{books}</var>
</assign>
<msg timestamp="20201029 10:02:03.888" level="INFO">Executing : Query  |  select * from books where title='Nutuk' and author_lname='Ataturk' </msg>
<msg timestamp="20201029 10:02:03.896" level="INFO">@{books} = [ (20, 'Nutuk', 'Mustafa Kemal', 'Ataturk', 1923, 23, 500) ]</msg>
<status status="PASS" starttime="20201029 10:02:03.888" endtime="20201029 10:02:03.896"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${books}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20201029 10:02:03.896" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20201029 10:02:03.896" endtime="20201029 10:02:03.896"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TARGET_BOOK}</arg>
<arg>${books}[0]</arg>
</arguments>
<msg timestamp="20201029 10:02:03.905" level="INFO">${TARGET_BOOK} = (20, 'Nutuk', 'Mustafa Kemal', 'Ataturk', 1923, 23, 500)</msg>
<status status="PASS" starttime="20201029 10:02:03.896" endtime="20201029 10:02:03.905"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:03.887" endtime="20201029 10:02:03.905"></status>
</kw>
<tags>
<tag>BAT</tag>
<tag>Create</tag>
<tag>CRUD</tag>
</tags>
<status status="PASS" starttime="20201029 10:02:03.834" endtime="20201029 10:02:03.910" critical="yes"></status>
</test>
<test id="s1-t2" name="Reading All Books">
<kw name="Initialize Database Contents" type="setup">
<kw name="Execute Sql Script" library="DatabaseLibrary">
<doc>Executes the content of the `sqlScriptFileName` as SQL commands. Useful for setting the database to a known
state before running your tests, or clearing out your test data after running each a test. Set optional input
`sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>${INITIALIZE_DATABASE_CONTENTS}</arg>
</arguments>
<msg timestamp="20201029 10:02:03.914" level="INFO">Executing : Execute SQL Script  |  /home/hakan/Python/Robot/robot-fw-database-library-tests/Resources/book_shop_db_init.sql </msg>
<status status="PASS" starttime="20201029 10:02:03.913" endtime="20201029 10:02:03.947"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:03.913" endtime="20201029 10:02:03.948"></status>
</kw>
<kw name="When All Books Are Queried In Database">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>${QUERY_ALL_BOOKS}</arg>
</arguments>
<assign>
<var>@{books}</var>
</assign>
<msg timestamp="20201029 10:02:03.949" level="INFO">Executing : Query  |  select * from books; </msg>
<msg timestamp="20201029 10:02:03.958" level="INFO">@{books} = [ (1, 'The Namesake', 'Jhumpa', 'Lahiri', 2003, 32, 291) | (2, 'Norse Mythology', 'Neil', 'Gaiman', 2016, 43, 304) | (3, 'American Gods', 'Neil', 'Gaiman', 2001, 12, 465) | (4, 'Interpreter of Maladie...</msg>
<status status="PASS" starttime="20201029 10:02:03.948" endtime="20201029 10:02:03.962"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${books}</arg>
</arguments>
<msg timestamp="20201029 10:02:03.963" level="INFO">${books} = [(1, 'The Namesake', 'Jhumpa', 'Lahiri', 2003, 32, 291), (2, 'Norse Mythology', 'Neil', 'Gaiman', 2016, 43, 304), (3, 'American Gods', 'Neil', 'Gaiman', 2001, 12, 465), (4, 'Interpreter of Maladies', ...</msg>
<status status="PASS" starttime="20201029 10:02:03.962" endtime="20201029 10:02:03.963"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:03.948" endtime="20201029 10:02:03.963"></status>
</kw>
<kw name="Then Books Are Found">
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${books}</arg>
</arguments>
<msg timestamp="20201029 10:02:03.971" level="INFO">Length is 19</msg>
<status status="PASS" starttime="20201029 10:02:03.969" endtime="20201029 10:02:03.971"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:03.968" endtime="20201029 10:02:03.971"></status>
</kw>
<tags>
<tag>BAT</tag>
<tag>CRUD</tag>
<tag>Read</tag>
</tags>
<status status="PASS" starttime="20201029 10:02:03.913" endtime="20201029 10:02:03.975" critical="yes"></status>
</test>
<test id="s1-t3" name="Updating Target Book">
<kw name="Initialize Database Contents" type="setup">
<kw name="Execute Sql Script" library="DatabaseLibrary">
<doc>Executes the content of the `sqlScriptFileName` as SQL commands. Useful for setting the database to a known
state before running your tests, or clearing out your test data after running each a test. Set optional input
`sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>${INITIALIZE_DATABASE_CONTENTS}</arg>
</arguments>
<msg timestamp="20201029 10:02:03.984" level="INFO">Executing : Execute SQL Script  |  /home/hakan/Python/Robot/robot-fw-database-library-tests/Resources/book_shop_db_init.sql </msg>
<status status="PASS" starttime="20201029 10:02:03.984" endtime="20201029 10:02:04.012"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:03.983" endtime="20201029 10:02:04.012"></status>
</kw>
<kw name="Given Create Target Book">
<kw name="Execute Sql Script" library="DatabaseLibrary">
<doc>Executes the content of the `sqlScriptFileName` as SQL commands. Useful for setting the database to a known
state before running your tests, or clearing out your test data after running each a test. Set optional input
`sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>${CREATE_TARGET_BOOK}</arg>
</arguments>
<msg timestamp="20201029 10:02:04.014" level="INFO">Executing : Execute SQL Script  |  /home/hakan/Python/Robot/robot-fw-database-library-tests/Resources/create_target_book.sql </msg>
<status status="PASS" starttime="20201029 10:02:04.013" endtime="20201029 10:02:04.023"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:04.013" endtime="20201029 10:02:04.023"></status>
</kw>
<kw name="Given Target Book Exists">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>${QUERY_TARGET_BOOK}</arg>
</arguments>
<assign>
<var>@{books}</var>
</assign>
<msg timestamp="20201029 10:02:04.033" level="INFO">Executing : Query  |  select * from books where title='Nutuk' and author_lname='Ataturk' </msg>
<msg timestamp="20201029 10:02:04.036" level="INFO">@{books} = [ (20, 'Nutuk', 'Mustafa Kemal', 'Ataturk', 1923, 23, 500) ]</msg>
<status status="PASS" starttime="20201029 10:02:04.033" endtime="20201029 10:02:04.036"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${books}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20201029 10:02:04.037" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20201029 10:02:04.036" endtime="20201029 10:02:04.037"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TARGET_BOOK}</arg>
<arg>${books}[0]</arg>
</arguments>
<msg timestamp="20201029 10:02:04.050" level="INFO">${TARGET_BOOK} = (20, 'Nutuk', 'Mustafa Kemal', 'Ataturk', 1923, 23, 500)</msg>
<status status="PASS" starttime="20201029 10:02:04.037" endtime="20201029 10:02:04.050"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:04.033" endtime="20201029 10:02:04.051"></status>
</kw>
<kw name="Given Calculate new &quot;stock_quantity&quot; For Target Book">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${TARGET_BOOK}[${STOCK_QUANTITY}]</arg>
</arguments>
<assign>
<var>${current_stock_quantity}</var>
</assign>
<msg timestamp="20201029 10:02:04.052" level="INFO">${current_stock_quantity} = 23</msg>
<status status="PASS" starttime="20201029 10:02:04.051" endtime="20201029 10:02:04.052"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>$current_stock_quantity - 3</arg>
</arguments>
<assign>
<var>${new_stock_quantity}</var>
</assign>
<msg timestamp="20201029 10:02:04.066" level="INFO">${new_stock_quantity} = 20</msg>
<status status="PASS" starttime="20201029 10:02:04.052" endtime="20201029 10:02:04.066"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${NEW_STOCK_QUANTITY}</arg>
<arg>${new_stock_quantity}</arg>
</arguments>
<msg timestamp="20201029 10:02:04.069" level="INFO">${NEW_STOCK_QUANTITY} = 20</msg>
<status status="PASS" starttime="20201029 10:02:04.066" endtime="20201029 10:02:04.069"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:04.051" endtime="20201029 10:02:04.077"></status>
</kw>
<kw name="Given Form &quot;SQL Update Statement&quot; For Target Book">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>${SQL TEMPLATE}[update_book] % (${NEW_STOCK_QUANTITY}, ${TARGET_BOOK}[${BOOKS_ID}])</arg>
</arguments>
<assign>
<var>${sql_update_book_statement}</var>
</assign>
<msg timestamp="20201029 10:02:04.079" level="INFO">${sql_update_book_statement} = update books set stock_quantity=20 where book_id=20;</msg>
<status status="PASS" starttime="20201029 10:02:04.078" endtime="20201029 10:02:04.079"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>path=${UPDATE_TARGET_BOOK}</arg>
<arg>content=${sql_update_book_statement}</arg>
</arguments>
<msg timestamp="20201029 10:02:04.095" level="INFO" html="yes">Created file '&lt;a href="file:///home/hakan/Python/Robot/robot-fw-database-library-tests/Resources/update_target_book.sql"&gt;/home/hakan/Python/Robot/robot-fw-database-library-tests/Resources/update_target_book.sql&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20201029 10:02:04.079" endtime="20201029 10:02:04.095"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:04.078" endtime="20201029 10:02:04.096"></status>
</kw>
<kw name="When Target Books Stock Quantity Is Updated In Database">
<kw name="Execute Sql Script" library="DatabaseLibrary">
<doc>Executes the content of the `sqlScriptFileName` as SQL commands. Useful for setting the database to a known
state before running your tests, or clearing out your test data after running each a test. Set optional input
`sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>${UPDATE_TARGET_BOOK}</arg>
</arguments>
<msg timestamp="20201029 10:02:04.109" level="INFO">Executing : Execute SQL Script  |  /home/hakan/Python/Robot/robot-fw-database-library-tests/Resources/update_target_book.sql </msg>
<status status="PASS" starttime="20201029 10:02:04.099" endtime="20201029 10:02:04.118"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:04.099" endtime="20201029 10:02:04.119"></status>
</kw>
<kw name="Then Target Book Exists">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>${QUERY_TARGET_BOOK}</arg>
</arguments>
<assign>
<var>@{books}</var>
</assign>
<msg timestamp="20201029 10:02:04.124" level="INFO">Executing : Query  |  select * from books where title='Nutuk' and author_lname='Ataturk' </msg>
<msg timestamp="20201029 10:02:04.133" level="INFO">@{books} = [ (20, 'Nutuk', 'Mustafa Kemal', 'Ataturk', 1923, 20, 500) ]</msg>
<status status="PASS" starttime="20201029 10:02:04.124" endtime="20201029 10:02:04.133"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${books}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20201029 10:02:04.133" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20201029 10:02:04.133" endtime="20201029 10:02:04.133"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TARGET_BOOK}</arg>
<arg>${books}[0]</arg>
</arguments>
<msg timestamp="20201029 10:02:04.136" level="INFO">${TARGET_BOOK} = (20, 'Nutuk', 'Mustafa Kemal', 'Ataturk', 1923, 20, 500)</msg>
<status status="PASS" starttime="20201029 10:02:04.133" endtime="20201029 10:02:04.136"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:04.123" endtime="20201029 10:02:04.136"></status>
</kw>
<kw name="Then &quot;stock_quantity&quot; For Target Book Updated">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${TARGET_BOOK}[${STOCK_QUANTITY}]</arg>
</arguments>
<assign>
<var>${current_stock_quantity}</var>
</assign>
<msg timestamp="20201029 10:02:04.137" level="INFO">${current_stock_quantity} = 20</msg>
<status status="PASS" starttime="20201029 10:02:04.137" endtime="20201029 10:02:04.137"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${current_stock_quantity}</arg>
<arg>${NEW_STOCK_QUANTITY}</arg>
</arguments>
<status status="PASS" starttime="20201029 10:02:04.137" endtime="20201029 10:02:04.137"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:04.136" endtime="20201029 10:02:04.139"></status>
</kw>
<tags>
<tag>BAT</tag>
<tag>CRUD</tag>
<tag>Update</tag>
</tags>
<status status="PASS" starttime="20201029 10:02:03.983" endtime="20201029 10:02:04.139" critical="yes"></status>
</test>
<test id="s1-t4" name="Deleting Target Book">
<kw name="Initialize Database Contents" type="setup">
<kw name="Execute Sql Script" library="DatabaseLibrary">
<doc>Executes the content of the `sqlScriptFileName` as SQL commands. Useful for setting the database to a known
state before running your tests, or clearing out your test data after running each a test. Set optional input
`sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>${INITIALIZE_DATABASE_CONTENTS}</arg>
</arguments>
<msg timestamp="20201029 10:02:04.159" level="INFO">Executing : Execute SQL Script  |  /home/hakan/Python/Robot/robot-fw-database-library-tests/Resources/book_shop_db_init.sql </msg>
<status status="PASS" starttime="20201029 10:02:04.143" endtime="20201029 10:02:04.189"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:04.143" endtime="20201029 10:02:04.189"></status>
</kw>
<kw name="Given Create Target Book">
<kw name="Execute Sql Script" library="DatabaseLibrary">
<doc>Executes the content of the `sqlScriptFileName` as SQL commands. Useful for setting the database to a known
state before running your tests, or clearing out your test data after running each a test. Set optional input
`sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>${CREATE_TARGET_BOOK}</arg>
</arguments>
<msg timestamp="20201029 10:02:04.190" level="INFO">Executing : Execute SQL Script  |  /home/hakan/Python/Robot/robot-fw-database-library-tests/Resources/create_target_book.sql </msg>
<status status="PASS" starttime="20201029 10:02:04.190" endtime="20201029 10:02:04.194"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:04.190" endtime="20201029 10:02:04.195"></status>
</kw>
<kw name="Given Target Book Exists">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>${QUERY_TARGET_BOOK}</arg>
</arguments>
<assign>
<var>@{books}</var>
</assign>
<msg timestamp="20201029 10:02:04.197" level="INFO">Executing : Query  |  select * from books where title='Nutuk' and author_lname='Ataturk' </msg>
<msg timestamp="20201029 10:02:04.202" level="INFO">@{books} = [ (20, 'Nutuk', 'Mustafa Kemal', 'Ataturk', 1923, 23, 500) ]</msg>
<status status="PASS" starttime="20201029 10:02:04.196" endtime="20201029 10:02:04.202"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${books}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20201029 10:02:04.202" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20201029 10:02:04.202" endtime="20201029 10:02:04.211"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TARGET_BOOK}</arg>
<arg>${books}[0]</arg>
</arguments>
<msg timestamp="20201029 10:02:04.213" level="INFO">${TARGET_BOOK} = (20, 'Nutuk', 'Mustafa Kemal', 'Ataturk', 1923, 23, 500)</msg>
<status status="PASS" starttime="20201029 10:02:04.212" endtime="20201029 10:02:04.213"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:04.196" endtime="20201029 10:02:04.216"></status>
</kw>
<kw name="Given &quot;SQL Delete Statement&quot; Formed For Target Book">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>${SQL TEMPLATE}[delete_book] % ${TARGET_BOOK}[${BOOKS_ID}]</arg>
</arguments>
<assign>
<var>${sql_delete_book_statement}</var>
</assign>
<msg timestamp="20201029 10:02:04.218" level="INFO">${sql_delete_book_statement} = delete from books where book_id=20;</msg>
<status status="PASS" starttime="20201029 10:02:04.218" endtime="20201029 10:02:04.218"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>path=${DELETE_TARGET_BOOK}</arg>
<arg>content=${sql_delete_book_statement}</arg>
</arguments>
<msg timestamp="20201029 10:02:04.230" level="INFO" html="yes">Created file '&lt;a href="file:///home/hakan/Python/Robot/robot-fw-database-library-tests/Resources/delete_target_book.sql"&gt;/home/hakan/Python/Robot/robot-fw-database-library-tests/Resources/delete_target_book.sql&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20201029 10:02:04.218" endtime="20201029 10:02:04.234"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:04.217" endtime="20201029 10:02:04.243"></status>
</kw>
<kw name="When Target Book is Deleted In Database">
<kw name="Execute Sql Script" library="DatabaseLibrary">
<doc>Executes the content of the `sqlScriptFileName` as SQL commands. Useful for setting the database to a known
state before running your tests, or clearing out your test data after running each a test. Set optional input
`sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>${DELETE_TARGET_BOOK}</arg>
</arguments>
<msg timestamp="20201029 10:02:04.253" level="INFO">Executing : Execute SQL Script  |  /home/hakan/Python/Robot/robot-fw-database-library-tests/Resources/delete_target_book.sql </msg>
<status status="PASS" starttime="20201029 10:02:04.252" endtime="20201029 10:02:04.258"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:04.243" endtime="20201029 10:02:04.258"></status>
</kw>
<kw name="Then Target Book Does Not Exist In Database">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>${QUERY_TARGET_BOOK}</arg>
</arguments>
<assign>
<var>@{books}</var>
</assign>
<msg timestamp="20201029 10:02:04.263" level="INFO">Executing : Query  |  select * from books where title='Nutuk' and author_lname='Ataturk' </msg>
<msg timestamp="20201029 10:02:04.271" level="INFO">@{books} = [ ]</msg>
<status status="PASS" starttime="20201029 10:02:04.262" endtime="20201029 10:02:04.271"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${books}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20201029 10:02:04.272" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20201029 10:02:04.271" endtime="20201029 10:02:04.272"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:04.261" endtime="20201029 10:02:04.272"></status>
</kw>
<tags>
<tag>BAT</tag>
<tag>CRUD</tag>
<tag>Delete</tag>
</tags>
<status status="PASS" starttime="20201029 10:02:04.140" endtime="20201029 10:02:04.281" critical="yes"></status>
</test>
<kw name="Close Database Connection" type="teardown">
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20201029 10:02:04.286" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20201029 10:02:04.286" endtime="20201029 10:02:04.288"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:04.285" endtime="20201029 10:02:04.289"></status>
</kw>
<status status="PASS" starttime="20201029 10:02:03.648" endtime="20201029 10:02:04.289"></status>
</suite>
<statistics>
<total>
<stat pass="4" fail="0">Critical Tests</stat>
<stat pass="4" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="4" fail="0">BAT</stat>
<stat pass="1" fail="0">Create</stat>
<stat pass="4" fail="0">CRUD</stat>
<stat pass="1" fail="0">Delete</stat>
<stat pass="1" fail="0">Read</stat>
<stat pass="1" fail="0">Update</stat>
</tag>
<suite>
<stat pass="4" fail="0" id="s1" name="Book Shop Db Tests">Book Shop Db Tests</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
